import { useLocation, useNavigate, useParams } from "react-router-dom";
import { useState, useEffect } from "react";
import axios from "axios";
import { ca } from "date-fns/locale";

const BookingDetail = () => {
  const { id } = useParams();
  const location = useLocation(); // L·∫•y d·ªØ li·ªáu state t·ª´ location
  const bookingInfo = location.state || {}; // D·ªØ li·ªáu ƒë∆∞·ª£c truy·ªÅn t·ª´ SeatSelection

  const seats = bookingInfo.Seat || []; // Gh·∫ø ƒë√£ ch·ªçn
  const ticketPrice = parseFloat(bookingInfo.Price) || 0; // Gi√° v√©
  const serviceCharge = 0.06 * ticketPrice; // T√≠nh ph√≠ d·ªãch v·ª•
  const date = bookingInfo.Date || ""; // Ng√†y
  const time = bookingInfo.Time || ""; // Th·ªùi gian

  const totalTicketPrice = ticketPrice * seats.length; // T√≠nh t·ªïng gi√° v√©
  const totalServiceCharge = serviceCharge * seats.length; // T√≠nh t·ªïng ph√≠ d·ªãch v·ª•
  const [amount, setAmount] = useState(totalTicketPrice + totalServiceCharge); // T√≠nh t·ªïng thanh to√°n
  const totalPrice = ticketPrice * seats.length;
  const [movieDetail, setMovieDetail] = useState(null);
  const [user, setUser] = useState(null); // Th√™m state ƒë·ªÉ l∆∞u th√¥ng tin ng∆∞·ªùi d√πng
  const navigate = useNavigate();
  useEffect(() => {
    const fetchMovieDetail = async () => {
      const options = {
        method: "GET",
        headers: {
          accept: "application/json",
          Authorization: `Bearer ${import.meta.env.VITE_API_KEY}`,
        },
      };
      const response = await fetch(
        `https://api.themoviedb.org/3/movie/${id}?language=vi-VN&region=VN`,
        options
      );
      const data = await response.json();
      setMovieDetail(data);
    };

    fetchMovieDetail();
  }, [id]);
  useEffect(() => {
    const fetchUser = async () => {
      try {
        const response = await axios.get(
          "http://localhost:3000/api/current_user",
          {
            withCredentials: true,
          }
        );
        if (response.data.status === "success") {
          setUser(response.data.data.user); // C·∫≠p nh·∫≠t state v·ªõi th√¥ng tin ng∆∞·ªùi d√πng
        }
      } catch (error) {
        console.error("Error fetching user:", error);
      }
    };

    fetchUser();
  }, []);
  const handlePayment = async () => {
    try {
      const response = await axios.post("http://localhost:3000/api/payment", {
        amount: amount,
        show_id: bookingInfo.showId,
        user_id: user.userId,
        seats: seats,
      });

      if (response.data.paymentUrl) {
        window.open(response.data.paymentUrl, "_blank");

        // ‚úÖ L∆∞u `transId` v√†o state ƒë·ªÉ ki·ªÉm tra sau
        const transId = response.data.transId;
        checkPayment(transId, 0);
      }
    } catch (error) {
      console.error("L·ªói khi thanh to√°n:", error);
    }
  };

  const checkPayment = async (transId, attempt = 0) => {
    if (attempt >= 60) {
      // D·ª´ng l·∫°i sau 15 ph√∫t (60 l·∫ßn x 15 gi√¢y)
      console.log("‚õî H·∫øt th·ªùi gian ch·ªù thanh to√°n.");
      return;
    }

    try {
      console.log(`üîÑ L·∫ßn ki·ªÉm tra th·ª© ${attempt + 1} v·ªõi transId:`, transId);

      const result = await axios.get(
        `http://localhost:3000/api/check-payment/${transId}`
      );

      console.log("D·ªØ li·ªáu nh·∫≠n t·ª´ API:", result.data);

      if (Number(result.data.return_code) === 1) {
        console.log("‚úÖ Thanh to√°n th√†nh c√¥ng!");
        handleInsertTicket();
      } else {
        console.log(
          `‚è≥ ƒê∆°n h√†ng ch∆∞a ho√†n t·∫•t, ki·ªÉm tra l·∫°i sau (${attempt + 1}/60)`
        );
        setTimeout(
          () => checkPayment(transId, attempt + 1),
          attempt < 12 ? 5000 : 15000
        );
        // 12 l·∫ßn ƒë·∫ßu (1 ph√∫t) ki·ªÉm tra m·ªói 5 gi√¢y, sau ƒë√≥ gi√£n ra 15 gi√¢y
      }
    } catch (error) {
      console.error("L·ªói khi ki·ªÉm tra thanh to√°n:", error);
    }
  };

  const handleInsertTicket = async () => {
    const seatString = seats.join(", "); // Chuy·ªÉn ƒë·ªïi m·∫£ng gh·∫ø th√†nh chu·ªói
    const payload = {
      show_id: bookingInfo.showId,
      user_id: user.userId,
      seat_number: seatString, // L∆∞u chu·ªói gh·∫ø
      price: amount, // T·ªïng ti·ªÅn cho t·∫•t c·∫£ gh·∫ø
    };

    try {
      const insert = await axios.post(
        `http://localhost:3000/api/ticket`,
        payload
      );
      if (insert.status === 200 || insert.status === 201) {
        console.log("Purchase successful", insert.data);
      }
    } catch (error) {
      console.error("Error during Purchase: ", error);
    }
    const payloadnav = {
      show_id: bookingInfo.showId,
      user_id: user.userId,
      seats: seats, // L∆∞u chu·ªói gh·∫ø
      price: amount, // T·ªïng ti·ªÅn cho t·∫•t c·∫£ gh·∫ø
      time: time,
      title: movieDetail.title,
      date: date,
      ticketPrice: ticketPrice,
    };
    navigate(`/ticket`, { state: payloadnav });
    console.log(payloadnav);
  };

  // Ki·ªÉm tra n·∫øu movieDetail ch∆∞a c√≥ d·ªØ li·ªáu
  if (!movieDetail) {
    return <p>Loading...</p>; // Hi·ªÉn th·ªã Loading khi ch∆∞a c√≥ d·ªØ li·ªáu
  }

  const formatCurrency = (value) => {
    return (value || 0).toLocaleString("vi-VN");
  };
  return (
    <div className="bg-gradient w-full h-screen bg-no-repeat bg-cover flex items-center justify-center">
      <div className="border-white border text-white p-8 rounded-lg max-w-lg mx-auto w-1/2">
        <h2 className="text-2xl font-bold mb-6 font-custom_bold">
          Booking Detail
        </h2>
        <p>Show ID: {bookingInfo.ShowId}</p>
        <div className="mb-6">
          <h3 className="text-lg font-custom">Schedule</h3>
          <div className="mt-4">
            <p>
              <strong>
                Movie Title: <br />
              </strong>{" "}
              {movieDetail.title}
            </p>
            <p>
              <strong>
                Date: <br />
              </strong>{" "}
              {date}
            </p>
            <p>
              <strong>
                Ticket ({seats.length}):
                <br />
              </strong>{" "}
              {seats.join(", ")}
            </p>
            <p>
              <strong>
                Hours:
                <br />
              </strong>{" "}
              {time}
            </p>
          </div>
        </div>

        <div className="mb-6">
          <h3 className="text-lg font-semibold">Transaction Detail</h3>
          <div className="mt-4">
            <p className="flex justify-between">
              <span>REGULAR SEAT</span>
              <span>
                {formatCurrency(ticketPrice)} x {seats.length} VND
              </span>
            </p>
            <p className="flex justify-between">
              <span>Service Charge (6%)</span>
              <span>
                {formatCurrency(serviceCharge)} x {seats.length} VND
              </span>
            </p>
          </div>
          <hr className="my-4 border-gray-600" />
          <p className="flex justify-between font-bold">
            <span>Total payment</span>
            <span>{formatCurrency(amount)} VND</span>
          </p>
        </div>

        <button
          onClick={handlePayment}
          className="bg-red-500 text-white py-2 px-6 rounded-lg w-full hover:bg-red-600 transition duration-300"
        >
          Checkout Ticket
        </button>

        <p className="mt-4 text-sm text-center text-gray-400">
          *Purchased ticket cannot be canceled
        </p>
      </div>
    </div>
  );
};

export default BookingDetail;
